generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  email                   String?   @unique
  emailVerified           DateTime?
  password                String?
  image                   String?
  isTwoFactorEnabled      Boolean @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  role                    UserRole @default(USER)
  accounts                Account[]
  scores                  Score[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChangeEmailToken {
  id        String   @id @default(cuid())
  email     String
  token     String
  expires   DateTime

  @@unique([email, token])
}

model Game {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  scores      Score[]
}

model Score {
  id      String  @id @default(cuid())
  value   Int
  userId  String
  gameId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}
